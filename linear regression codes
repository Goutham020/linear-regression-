# Import necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler

# Load the dataset (simulated data based on GTEx)
# In practice, you would download this from GTEx portal or use a preprocessed version
data = {
    'LEP': [12.5, 8.2, 15.1, 9.8, 11.3, 14.6, 7.9, 10.2, 13.7, 16.4],
    'ADIPOQ': [5.2, 6.8, 4.5, 7.1, 5.9, 4.8, 6.5, 5.7, 4.9, 3.8],
    'FTO': [3.1, 2.8, 3.5, 2.9, 3.2, 3.7, 2.7, 3.0, 3.4, 3.9],
    'PPARG': [1.8, 2.1, 1.6, 2.2, 1.9, 1.5, 2.0, 1.8, 1.7, 1.4],
    'IRS1': [4.2, 3.8, 4.6, 3.7, 4.1, 4.8, 3.6, 4.0, 4.5, 5.0],
    'GCG': [2.5, 3.1, 2.2, 3.2, 2.7, 2.1, 3.0, 2.6, 2.3, 2.0],
    'INS': [6.8, 5.2, 7.5, 5.0, 6.2, 7.8, 4.8, 5.9, 7.2, 8.1],
    'IGF1': [3.5, 2.8, 4.0, 2.7, 3.3, 4.2, 2.6, 3.1, 3.8, 4.5],
    'UCP1': [1.2, 1.5, 1.0, 1.6, 1.3, 0.9, 1.4, 1.2, 1.1, 0.8],
    'LPL': [2.8, 3.4, 2.5, 3.5, 3.0, 2.4, 3.3, 2.9, 2.6, 2.3],
    'BMI': [28.5, 22.1, 31.8, 23.5, 26.7, 33.2, 21.3, 25.0, 30.5, 35.7]
}

df = pd.DataFrame(data)

# Display basic info about the dataset
print("Dataset shape:", df.shape)
print("\nFirst 5 rows:")
print(df.head())
print("\nDataset description:")
print(df.describe())

# Correlation analysis
plt.figure(figsize=(12, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', center=0)
plt.title('Correlation Matrix of Gene Expressions and BMI')
plt.show()

# Simple Linear Regression (using LEP gene expression)
X_simple = df[['LEP']]  # Leptin gene expression
y_simple = df['BMI']    # Target variable

# Split data into train and test sets
X_train_s, X_test_s, y_train_s, y_test_s = train_test_split(
    X_simple, y_simple, test_size=0.2, random_state=42)

# Create and fit the model
simple_model = LinearRegression()
simple_model.fit(X_train_s, y_train_s)

# Make predictions
y_pred_s = simple_model.predict(X_test_s)

# Evaluate the model
print("\nSimple Linear Regression Results (LEP vs BMI):")
print("Coefficient:", simple_model.coef_[0])
print("Intercept:", simple_model.intercept_)
print("MAE:", mean_absolute_error(y_test_s, y_pred_s))
print("MSE:", mean_squared_error(y_test_s, y_pred_s))
print("R² Score:", r2_score(y_test_s, y_pred_s))

# Plot regression line
plt.scatter(X_test_s, y_test_s, color='blue', label='Actual')
plt.plot(X_test_s, y_pred_s, color='red', linewidth=2, label='Predicted')
plt.xlabel('LEP Gene Expression Level')
plt.ylabel('Body Mass Index (BMI)')
plt.title('Simple Linear Regression: LEP Expression vs BMI')
plt.legend()
plt.show()

# Multiple Linear Regression (using all gene expressions)
X_multiple = df.drop('BMI', axis=1)
y_multiple = df['BMI']

# Standardize features (important for interpreting coefficients)
scaler = StandardScaler()
X_multiple_scaled = scaler.fit_transform(X_multiple)
X_multiple_scaled = pd.DataFrame(X_multiple_scaled, columns=X_multiple.columns)

# Split data into train and test sets
X_train_m, X_test_m, y_train_m, y_test_m = train_test_split(
    X_multiple_scaled, y_multiple, test_size=0.2, random_state=42)

# Create and fit the model
multiple_model = LinearRegression()
multiple_model.fit(X_train_m, y_train_m)

# Make predictions
y_pred_m = multiple_model.predict(X_test_m)

# Evaluate the model
print("\nMultiple Linear Regression Results:")
print("Coefficients:", multiple_model.coef_)
print("Intercept:", multiple_model.intercept_)
print("MAE:", mean_absolute_error(y_test_m, y_pred_m))
print("MSE:", mean_squared_error(y_test_m, y_pred_m))
print("R² Score:", r2_score(y_test_m, y_pred_m))

# Feature importance visualization
features = pd.DataFrame({
    'Gene': X_multiple.columns,
    'Coefficient': multiple_model.coef_
}).sort_values('Coefficient', ascending=False)

plt.figure(figsize=(10, 6))
plt.barh(features['Gene'], features['Coefficient'])
plt.xlabel('Standardized Coefficient Value')
plt.title('Gene Expression Impact on BMI (Multiple Linear Regression)')
plt.show()
